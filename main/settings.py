"""
Django settings for main project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
LICENSE_VALID = False
LICENSE_MESSAGE = "License not checked"
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-powkflxg=xxao-a8-)#@-dlxlt74m51wqtn*a+yw3gxc8+scp+'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# Application definition
INSTALLED_APPS = [
    'main',
    'pos',
    "fiscalization", 
    "reports",
    'rest_framework',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'main.middleware.LicenseMiddleware',
    #'main.middleware.PermissionMiddleware',
]
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]
}

ROOT_URLCONF = 'main.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'main.wsgi.application'
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
}

AUTH_USER_MODEL = "main.User"
# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
"""
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}"""
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'POS',      # e.g. 'presspos'
        'USER': 'postgres',           # e.g. 'postgres'
        'PASSWORD': 'Admin123',       # e.g. 'Admin1234'
        'HOST': 'localhost',               # or your server IP
        'PORT': '5432',                    # default PostgreSQL port
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
import os
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, "pos/static")]
RECEIPT_URL = '/receipts/'
HTML_URL='/html/'
RECEIPT_ROOT = os.path.join(BASE_DIR,"FILES/receipts")
HTML_ROOT=os.path.join(BASE_DIR,"FILES/html")
REPORT_URL="/reports/"
REPORT_ROOT=os.path.join(BASE_DIR,"FILES/reports")
CERTIFICATE_URL="/certificate/"
CERTIFICATE_ROOT=os.path.join(BASE_DIR,"FILES/certificates")
LOGO_ROOT=  os.path.join(BASE_DIR,"FILES/logo")
FILES_URL="media/"
FILES_ROOT=os.path.join(BASE_DIR,"FILES/")
PRODOUCT_URL="products/"
PRODOUCT_ROOT=os.path.join(BASE_DIR,"FILES/products")

# Ensure directories exist
os.makedirs(FILES_ROOT,exist_ok=True)
os.makedirs(RECEIPT_ROOT, exist_ok=True)
os.makedirs(HTML_ROOT, exist_ok=True)
os.makedirs(REPORT_ROOT, exist_ok=True)
os.makedirs(CERTIFICATE_ROOT, exist_ok=True)
os.makedirs(LOGO_ROOT,exist_ok=True)
os.makedirs(PRODOUCT_ROOT,exist_ok=True)
